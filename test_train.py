# -*- coding: utf-8 -*-
"""Untitled.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DU6L7xln3FXNiLDNomm3D5i_i9gGJG1K
"""

from keras.models import Sequential
from keras.layers import Dense
import pandas as pd
import numpy as np
# fix random seed for reproducibility
np.random.seed(7)

from google.colab import files
uploaded = files.upload()

import io
dataset = pd.read_csv(io.BytesIO(uploaded['traindata.csv']))
dataset = pd.DataFrame(dataset, columns=['MinTemp','MaxTemp','Rainfall','Humidity9am','Humidity3pm','Temp9am','Temp3pm','RainToday'])

data = dataset.values
print(data.shape)

i,j = data.shape
print(i, j)
count_test = 0
X = None
Y = None
for value in data:
    if (str(value[0]) == "nan" or str(value[1]) == "nan" or str(value[2]) == "nan" or str(value[3]) == "nan" or str(value[4]) == "nan" or str(value[5]) == "nan" or str(value[6]) == "nan"):
        continue
    else:
        if X is None:
            X = np.array([value[0:7]])
        else:
            X = np.append(X, np.array([value[0:7]]), axis = 0)
        if Y is None:
            if value[7] == "No":
                Y = np.array([0])
            else:
                Y = np.array([1])
        else:
            if value[7] == "No":
                Y = np.append(Y, np.array([0]), axis = 0)
            else:
                Y = np.append(Y, np.array([1]), axis = 0)

model = Sequential()
model.add(Dense(16, input_dim = 7, activation='relu'))
model.add(Dense(8, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

model.fit(X[:100000], Y[:100000], epochs=50, batch_size=50)

M = X[100000:]
N = Y[100000:]

scores = model.evaluate(M, N)
print("\n%s: %.2f%%" % (model.metrics_names[1], scores[1]*100))

